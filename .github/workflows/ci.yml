name: Publish release manifest

on:
  push:
  schedule:
    - cron: "0 0 * * SUN"

permissions:
  id-token: write

jobs:
  plan:
    runs-on: ubuntu-latest
    name: Refresh package releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: narwhl/setup-terraform@v1
        with:
          state: root/supplychain

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
  apply:
    runs-on: ubuntu-latest
    environment: Production
    needs: plan
    name: Rollout updated manifest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Authenticate to security token service
        uses: narwhl/imprint@v1
        with:
          scope: cloudflare:r2 github

      - name: Setup Terraform
        uses: narwhl/setup-terraform@v1
        with:
          state: root/supplychain

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Get output from terraform state
        id: state
        run: |
          terraform output -json state >> current.json
          cp current.json $(terraform output -raw version).json
          terraform output -raw google_cloud_sdk_repo > google-cloud-sdk.repo
          terraform output -raw grafana_repo > grafana.repo
          echo "version=$(terraform output -raw version)" >> $GITHUB_OUTPUT

      - name: Install Rclone
        run: |
          sudo apt-get update && sudo apt-get install -yqq rclone

      - name: Copy files with Rclone
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACL: private
          RCLONE_CONFIG_R2_ENDPOINT: ${{ env.CF_R2_ENDPOINT_URL }}
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ env.CF_R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ env.CF_R2_SECRET_ACCESS_KEY }}
          RCLONE_S3_NO_CHECK_BUCKET: true
        run: |
          rclone copy current.json r2:artifact/upstream/
          rclone copy ${{ steps.state.outputs.version }}.json r2:artifact/upstream/
          rclone copy google-cloud-sdk.repo r2:artifact/upstream/
          rclone copy grafana.repo r2:artifact/upstream/
      - name: Trigger Downstream Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            for (const workflow of ['sysext', 'ami']) {
              github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: 'blueprint',
                workflow_id: `${workflow}.yml`,
                ref: 'main',
              })
            }
